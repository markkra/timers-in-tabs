{"version":3,"sources":["components/timer/elapsedTime/index.js","components/timer/button/index.js","components/timer/hooks/useTimer.js","components/timer/hooks/useInterval.js","components/timer/index.js","App.js","serviceWorker.js","index.js"],"names":["ElapsedTime","display","Button","clickHandler","label","onClick","useTimer","uniqueTimerId","useState","JSON","parse","window","localStorage","getItem","timingEvents","setTimingEvents","displayTime","setDisplayTime","delay","isRunning","setIsRunning","totalTime","useRef","dateFromDateString","dateStr","Date","useEffect","setItem","stringify","refreshTimeDisplay","useCallback","events","durationMillisecs","total","i","length","startTime","nextDateString","current","formatTimeStamp","leading","callback","savedCallback","id","setInterval","clearInterval","useInterval","useDebugValue","timeDisplay","handleClick","handleReset","getLabel","Timer","selectedIndexStorageKey","App","Number","selectedIndex","setSelectedIndex","className","onSelect","index","last","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35b9445e.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ElapsedTime = ({display}) => {\n  return (\n    <div>\n      {display}\n    </div>\n  )\n}\n\nElapsedTime.propTypes = {\n  display: PropTypes.string\n}\n\nexport default ElapsedTime\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Button = ({clickHandler, label }) => {\n  return (\n    <div>\n      <button onClick={clickHandler}>{label}</button>\n    </div>\n  )\n}\n\nButton.propTypes = {\n  clickHandler: PropTypes.func,\n  label: PropTypes.string,\n}\n\nexport default Button\n\n","import { useCallback, useDebugValue, useState, useEffect, useRef } from 'react';\nimport formatTimeStamp from 'format-duration';\nimport { useInterval } from \"./useInterval\";\n\nexport function useTimer(uniqueTimerId) {\n  const initialTimingEvents = () => JSON.parse(window.localStorage.getItem(uniqueTimerId)) || [];\n  const [timingEvents, setTimingEvents] = useState(initialTimingEvents);\n  const [displayTime, setDisplayTime] = useState('');\n  const [delay] = useState(1000);\n  const [isRunning, setIsRunning] = useState(false);\n  const totalTime = useRef(0);\n\n  function dateFromDateString(dateStr){\n    return new Date(dateStr);\n  }\n\n  function getDisplayTime(durationMillisecs){\n    return formatTimeStamp(durationMillisecs, { leading: true })\n  }\n\n  useEffect(() => {\n    window.localStorage.setItem(uniqueTimerId, JSON.stringify(timingEvents));\n    return () => window.localStorage.setItem(uniqueTimerId, JSON.stringify(timingEvents));\n  }, [timingEvents, uniqueTimerId]);\n\n  const refreshTimeDisplay = useCallback((events) => {\n    let total = 0;\n    for (let i = 0; i < events.length; i += 2) {\n      const startTime = dateFromDateString(events[i]);\n      const nextDateString = events[i + 1];\n      const stopTime = (nextDateString && dateFromDateString(nextDateString)) || new Date();\n      total += stopTime - startTime;\n    }\n    totalTime.current = total;\n\n    setDisplayTime(getDisplayTime(totalTime.current));\n  },[totalTime]);\n\n  const handleReset = () => setTimingEvents([]);\n\n  const handleClick = () => setTimingEvents([\n    ...timingEvents,\n    new Date()\n  ]);\n\n  const getLabel = () => {\n    if(timingEvents.length === 0){\n      return 'Start';\n    }\n    return timingEvents.length % 2 === 0 ? 'Resume' : 'Pause';\n  };\n\n  useEffect(() => {\n    refreshTimeDisplay(timingEvents);\n    setIsRunning(timingEvents.length % 2 !== 0);\n\n  }, [refreshTimeDisplay, timingEvents]);\n\n  useInterval(() => {\n    refreshTimeDisplay(timingEvents);\n  }, isRunning ? delay : null);\n\n  useDebugValue(displayTime);\n  return {\n    timeDisplay: displayTime,\n    handleClick,\n    handleReset,\n    getLabel,\n  };\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n","import React from 'react';\nimport ElapsedTime from './elapsedTime';\nimport Button from './button';\nimport { useTimer } from './hooks/useTimer';\nimport { PropTypes } from 'prop-types';\n\nexport default function Timer({uniqueTimerId}){\n  const {timeDisplay, handleClick, handleReset, getLabel } = useTimer(uniqueTimerId);\n\n  return (\n    <>\n      <ElapsedTime display={timeDisplay}/>\n      <Button clickHandler={handleClick} label={getLabel()}/>\n      <Button clickHandler={handleReset} label={'Reset'} />\n    </>\n  )\n\n}\n\nTimer.propTypes = {\n  uniqueTimerId: PropTypes.string,\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Timer from \"./components/timer\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nconst selectedIndexStorageKey = \"selectedIndex\";\n\nfunction App() {\n  const initialSelectedIndex = () =>\n    Number(window.localStorage.getItem(selectedIndexStorageKey)) || 0;\n  const [selectedIndex, setSelectedIndex] = useState(initialSelectedIndex);\n\n  const handleSelect = (index, last) => {\n    setSelectedIndex(index);\n  };\n\n  useEffect(() => {\n    window.localStorage.setItem(selectedIndexStorageKey, selectedIndex);\n  }, [selectedIndex]);\n\n  return (\n    <div className=\"container\">\n      <Tabs onSelect={handleSelect} selectedIndex={selectedIndex}>\n        <TabList>\n          <Tab>Timer 1</Tab>\n          <Tab>Timer 2</Tab>\n          <Tab>Timer 3</Tab>\n        </TabList>\n        <TabPanel>\n          <div className=\"App-header\">\n            <Timer uniqueTimerId=\"timer1\" />\n          </div>\n        </TabPanel>\n        <TabPanel>\n          <div className=\"App-header\">\n            <Timer uniqueTimerId=\"timer2\" />\n          </div>\n        </TabPanel>\n        <TabPanel>\n          <div className=\"App-header\">\n            <Timer uniqueTimerId=\"timer3\" />\n          </div>\n        </TabPanel>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}